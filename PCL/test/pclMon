#!/usr/bin/env perl

# Usage:       pclMon [-r] [-n 30] 272007
# ------
#              run PixelPcl jobs
#
#       -r     do NOT replicate data to PSI, use local mirror
#       -a     do NOT replicate data to PSI, use AAA
#       -n 30  create py files with 30 input filenames
#
# History      2016/05/10 First shot
#              2016/05/11 Change to one py file per run
#              2016/05/12 Added $opt_n
#
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

use Getopt::Std;
getopts('arn:');

my $HOME = $ENV{'HOME'};
my $dasFile = "$HOME/dasExpress.txt";
my $SEPREFIX = "srm://t3se01.psi.ch:8443/srm/managerv2?SFN=/pnfs/psi.ch/cms/trivcat";
my $submit = "$HOME/perl/run";


if (!$opt_n) {
    $opt_n = -1;
}

# -- loop over all runs provided
my $runA, $runB, $runS;
my $runDir;
my @files;
foreach $run (@ARGV) {
    @files = ();
    $runA = substr($run, 0, 3);
    $runB = substr($run, 3, 3);
    $runS = $runA . "/" . $runB;
    $runDir = "run-$run";
    unless (-e $runDir) {
	mkdir($runDir);
    }
    if ($opt_r) {
	print "run on local files\n";
	@files = &runLinesLocal($run);
    } elsif (!$opt_r && !$opt_a) {
	@files = &runLines($dasFile, $runS);
	print "replicate files to PSI\n";
	&dataReplica($runDir);
    } elsif ($opt_a) {
	@files = &runLines($dasFile, $runS);
	print "use AAA\n";
    }
    $filename = "$runDir/pcl-$run";
    &mkPyFile(\@files, $filename);
    chdir($runDir);
#    system("$submit -t ../../../../../pcl.tar -c ../prodNoComp.csh -m batch -q short.q -r 'PFNS srm://t3se01.psi.ch:8443/srm/managerv2\\?SFN=/pnfs/psi.ch/cms/trivcat%STORAGE1 /store/user/ursl/pixel/pcl/$runDir%SITE T3_CH_PSI' *.py");
    chdir("..");
}
exit(0);



# ----------------------------------------------------------------------
sub runLines() {
    my $lfile = shift(@_);
    my $runpattern = shift(@_);
    open(IN, "$lfile") || die "cannot open $lfile\n";
    my @lines = <IN>;
    close(IN);
    my @lfiles = ();
    foreach $line (@lines) {
	if ($line =~ /$runpattern/) {
	    chop($line);
	    push(@lfiles, $line);
	}
    }
    print "looked for $runpattern, found $#lfiles+1 files\n";
    return @lfiles;
}

# ----------------------------------------------------------------------
sub runLinesLocal() {
    my $run        = shift(@_);
    @sefiles = `srmls $SEPREFIX/store/user/ursl/files/pcl/run-$run`;
    my @lines = grep(/root$/, @sefiles);
    foreach $line (@lines) {
	($bla, $f) = split(/trivcat/, $line, 2);
	chop($f);
	push(@lfiles, $f);
    }
    print "looked for $run, found $#lfiles+1 files\n";
    return @lfiles;
}


# ----------------------------------------------------------------------
sub dataReplica() {
    my $ldir   = shift(@_);

    chdir($ldir);
    open(OUT, ">dr") || die "Cannot open dr for output\n";
    foreach $file (@files) {
	print OUT "$file\n";
    }
    close OUT;

    system("srmmkdir $SEPREFIX/store/user/ursl/files/pcl/$ldir");
    system("data_replica.py --discovery --to-site T3_CH_PSI dr /store/user/ursl/files/pcl/$ldir");
    chdir("..");
}


# ----------------------------------------------------------------------
sub mkPyFile() {
#    my $lfile = shift(@_);
    my ($aref, $lfile) = @_;
    my @array = @$aref;
    my $idx = 0;
    my $njobs = 1;
    if ($opt_n > 0) {
	$njobs = int(($#array+1)/$opt_n);
	my $rest = ($#array+1) % $opt_n;
	if ($rest != 0) {
	    print "njobs = $njobs; rest = $rest\n";
	    $njobs = $njobs + 1;
	}
    } else {
	$opt_n = $#array+1;
    }
    print "njobs = $njobs\n";
    for ($idx = 0; $idx < $njobs; $idx++) {
	$filename = sprintf("%s-%04i.py", $lfile, $idx);
	my $dccounts = $filename;
	($bla, $dccounts) = split(/\//, $dccounts);
	$dccounts =~ s/py$/txt/g;

	$poolsource = "    fileNames = cms.untracked.vstring( *(\n";
	for ($f = $idx*$opt_n; $f < ($idx+1)*$opt_n; $f++) {
	    $poolsource .= "        \"@array[$f]\",\n";
	    if ($f == $#array) {last;}
	}
	$poolsource .= "    ) )";

	open(OUT, ">$filename") || die "cannot open $filename\n";
	print OUT << "EOF";
# ----------------------------------------------------------------------
# -- RECO py template file for running pixel PCL
# ----------------------------------------------------------------------
import os
import FWCore.ParameterSet.Config as cms
process = cms.Process("PCL")


# ----------------------------------------------------------------------
process.load("FWCore.MessageLogger.MessageLogger_cfi")
process.MessageLogger.cerr.threshold = 'INFO'
process.MessageLogger.cerr.FwkReport.reportEvery = 100
process.MessageLogger.categories.append('HLTrigReport')
process.MessageLogger.categories.append('L1GtTrigReport')
process.options = cms.untracked.PSet(
    SkipEvent = cms.untracked.vstring('ProductNotFound'),
    wantSummary = cms.untracked.bool(True)
)

# -- Database configuration
process.load("CondCore.CondDB.CondDB_cfi")

# -- Conditions
process.load("Configuration.StandardSequences.MagneticField_38T_cff")
process.load("Configuration.StandardSequences.GeometryRecoDB_cff")
process.load("RecoVertex.BeamSpotProducer.BeamSpot_cfi")
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_condDBv2_cff")
from Configuration.AlCa.GlobalTag_condDBv2 import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, '80X_dataRun2_Express_v3', '')

# -- number of events
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(-1)
)

# -- Input files
process.source = cms.Source(
    "PoolSource",
$poolsource
)


process.pcl = cms.EDAnalyzer(
    "PixelPCL",
    verbose            = cms.untracked.int32(0),
    updateMaps         = cms.untracked.bool(False),
    fileName           = cms.untracked.string("$dccounts"),
    pixelClusterLabel  = cms.untracked.InputTag('siPixelClusters::RECO')
)

# -- Path
process.p = cms.Path(
    process.pcl
)

EOF

	close(OUT);
    }
}
